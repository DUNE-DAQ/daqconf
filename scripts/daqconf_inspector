#!/usr/bin/env python
from typing import Union
from rich import print
from rich.tree import Tree
from rich.table import Table

import click

import conffwk
from daqconf.system import get_segment_apps
from daqconf.dal_helpers import get_attribute_info, get_relation_info, get_attribute_list, get_relation_list, compare_dal_obj, find_related, find_duplicates

def start_ipython(loc):
    """
    Usage: start_ipython(locals())
    """
    try:
        locals().update(loc)
        import IPython
        IPython.embed(colors="neutral")
    except ImportError:
        print(f"[red]IPython not available[/red]")


def enabled_to_emoji(enabled: Union[int, None]) -> str:
    """
    Convert enabled values [enabled, disabled, disabled-by-logic] into standard emojis
    """
    match enabled:
        case 1:
            return ':white_check_mark:'
        case 0:
            return ':heavy_large_circle:' 
        case -1:
            return ':x:' 
        case _:
            return ':blue_circle:'

#----------
# Applications
#
def get_network_services(app):

    if not 'Application' in app.oksTypes():
        return []
    
    elif 'SmartDaqApplication' in app.oksTypes():
        return [r.descriptor.associated_service for r in app.network_rules]

    elif 'Application' in app.oksTypes():
        return app.exposes_service
    
    return []



class DalRichRenderer:

    def __init__(self, confdb: conffwk.Configuration):

        self._confdb = confdb

    ##
    # Enabled/disabled status visualization
    #
    def is_enabled(self, system, obj):
        import confmodel

        """Helper function that returns the status of an object in a system"""
        if not obj.isDalType('Component'):
            return None

        enabled = not confmodel.component_disabled(self._confdb._obj, system.id, obj.id)
        if enabled:
            return enabled
        
        enabled -= (obj in system.disabled)
        return enabled

    def make_segment_tree(self, segment, system: None, show_path: bool = False) -> Tree:
        '''
        Create a segment branch of the system tree as a rich.Tree object
        ''' 

        path = f"[blue]{self._confdb.get_obj(segment.className(), segment.id).contained_in()}[/blue]" if show_path else ""
        enabled = self.is_enabled(system, segment) if system else None
        tree = Tree(f"{enabled_to_emoji(enabled)} [yellow]{segment.id}[/yellow] {path}")

        c = segment.controller
        path = f"[blue]{self._confdb.get_obj(c.className(), c.id).contained_in()}[/blue]" if show_path else ""
        ports = ', '.join([f'{svc.port}([orange1]{svc.id}[/orange1])' for svc in get_network_services(c) ])
        host = f"[medium_purple1]{c.runs_on.runs_on.id}[/medium_purple1]"
        tree.add(f"[cyan]controller[/cyan]: [green]{c.id}[/green][magenta]@{c.className()}[/magenta] on {host} [{ports}] {path}")

        if segment.applications:
            app_tree = tree.add(f"[cyan]applications[/cyan]")
            for a in segment.applications:
                if a is None:
                    print(f"Detected None application in {segment.id}")
                    continue

                path = f"[blue]{self._confdb.get_obj(a.className(), a.id).contained_in()}[/blue]" if show_path else ""
                ports = ', '.join([f'{svc.port}([orange1]{svc.id}[/orange1])' for svc in get_network_services(a) ])
                host = f"[medium_purple1]{a.runs_on.runs_on.id}[/medium_purple1]"
                enabled = self.is_enabled(system, a) if system else None

                app_tree.add(f"{enabled_to_emoji(enabled)} [green]{a.id}[/green][magenta]@{a.className()}[/magenta] on {host} [{ports}] {path}")

        if segment.segments:
            seg_tree = tree.add(f"[cyan]segments[/cyan]")
            for s in segment.segments:
                if s is None:
                    print(f"Detected None segment in {segment.id}")
                    continue
                seg_tree.add(self.make_segment_tree(s, system, show_path))

        return tree

    def make_obj_tree(self, dal_obj, show_attrs=True, path=[], level=None, system=None):
        """Helper function to generate object trees"""

        en_status = enabled_to_emoji(self.is_enabled(system, dal_obj))+' ' if not system is None else ""

        tree = Tree(f"{en_status}[green]{dal_obj.id}[/green][magenta]@{dal_obj.className()}[/magenta]")
        if level == 0:
            return tree


        attrs = get_attribute_info(dal_obj)
        rels = get_relation_info(dal_obj)


        # if level is defined and the end of path is reached, reduce level
        if level is not None and not path:
            level -= 1


        # handle relationship/object selection
        rel_sel, obj_sel = None, None
        if path:
            rel_sel, obj_sel = path[0]
            if rel_sel not in rels:
                raise click.BadArgumentUsage(f"Object '{rel_sel}' does not exist in {dal_obj.id}")

        if show_attrs:
            for a in attrs:
                tree.add(f"[cyan]{a}[/cyan] = {getattr(dal_obj, a)}")
            
        rels = get_relation_info(dal_obj)
        if rel_sel:
            rels = { rel_sel: rels[rel_sel] }


        for rel, rinfo in rels.items():

            rel_val = getattr(dal_obj, rel)
            r_tree = tree.add(f"[yellow]{rel}[/yellow]@[magenta]{rinfo['type']}[/magenta] {('['+str(len(rel_val))+']' if isinstance(rel_val, list) else '')}")

            if not isinstance(rel_val,list):
                rel_val = [rel_val]

            if obj_sel is not None:
                if obj_sel not in [r.id for r in rel_val]:
                    raise click.BadArgumentUsage(f"Object '{obj_sel}' does not exist in {dal_obj.id}.{rel_sel}")
                rel_val = [o for o in rel_val if o.id == obj_sel ]

            for val in rel_val:
                if val is None:
                    continue
                r_tree.add(self.make_obj_tree(val, show_attrs, path[1:], level, system))
        return tree
    


def verify_oks_uid(ctx, param, value):
    """
    Helper function to Verify OKS UID options or arguments accorinf to the format id@class
    """

    if isinstance(value, tuple):
        return value

    try:
        id, _, klass = value.partition("@")
        return str(id), str(klass)
    except ValueError:
        raise click.BadParameter("format must be '<id>@<class>'")

class DaqInspectorContext:
    pass

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])

@click.group(context_settings=CONTEXT_SETTINGS)
@click.option('-i', '--interactive', is_flag=True, show_default=True, default=False, help="Start an interactive IPython system after executing the commands")
@click.argument('config_file')
@click.pass_obj
def cli(obj, interactive, config_file):
    """
    An utility script to develop ways to meaningfully inspect and 
    visualise DAQ configuration databases and to prototype validation algorithms.
    
    """
    cfg = conffwk.Configuration(f"oksconflibs:{config_file}")
    obj.cfg = cfg

    if interactive:
        start_ipython(locals())


@cli.command(short_help="Show systems information")
@click.option('-p', '--show-file_paths', is_flag=True, show_default=True, default=False)
@click.pass_obj
def show_systems(obj, show_file_paths):
    """
    Show details of each system available in the configuration database

    For each system found in the the database, `show-system` displays:

    \b
    - The high-level system view, including segments, controllers and applications as
      hierarchical tree.
      ID and Class are shown for applications and controllers, along with their host and services (open ports)
      The icon in front of segments and appliations indicate the enable/disable.

      Optionally, it displays the path of the the database file where the object is define 

    \b
      Legend
      ------
        ‚úÖ : Resource enabled
        ‚ùå : Resource directly disabled (listed in the System disable list)
        ‚≠ïÔ∏è : Resource indirectly disabled by algorithm
        üîµ : Not a resource

    - The summary of system objects, including the count of referenced objects, the list of directly
      disabled objects and the list of all disabled objects (directly or indirectly)
    
    - The system environment table.


    """
    from rich.highlighter import ReprHighlighter
    rh = ReprHighlighter()
    
    cfg = obj.cfg
    dr = DalRichRenderer(cfg)

    print("Systems")
    systems = cfg.get_objs("System")
    for s in systems:
        print(f" - '{s.UID()}' [blue]{s.contained_in()}[/blue]")

    print()

    for so in systems:

        grid = Table.grid("")
        

        s = cfg.get_dal('System', so.UID())
        tree = Tree(f"[yellow]{s.id}[/yellow]")
        infra_tree = tree.add('[yellow]infra-apps[/yellow]')
        for a in s.infrastructure_applications:
            infra_tree.add(a.id)

        tree.add(dr.make_segment_tree(s.segment, s, show_file_paths))

        t = Table("body", title=f'{s.id} tree', show_header=False, expand=True)
        t.add_row(tree)
        grid.add_row(t)


        #
        # Object information
        # 

        system_objs = set()
        find_related(s, system_objs)

        # Find all objects in the top segment (exclude disabled, variables and infra in the resource count))
        segment_objs = set()
        find_related(s.segment, segment_objs)        
        res = [o for o in segment_objs if 'ResourceBase' in o.oksTypes()]


        # Object table
        t = Table(title=f"{s.id} objects", show_header=False, expand=True)
        t.add_column('name')
        t.add_column('value')

        t.add_row('Objects', rh(str(len(system_objs))))
        t.add_row('Disabled mask', rh(str([ i.id for i in s.disabled])))
        t.add_row('Disabled resources', rh(str([ r.id for r in res if dr.is_enabled(s, r) != 1])))
        # print(t)
        grid.add_row(t)

        disabled_not_in_system = set(s.disabled)-segment_objs
        if disabled_not_in_system:
            print(f"‚ö†Ô∏è {sorted(disabled_not_in_system)}")


        #
        # DAQ Application information
        # 
        system_apps = get_segment_apps(s.segment)
        # Applications
        t = Table(title=f"{s.id} daq applications", show_header=False, expand=True)
        t.add_column('name')
        t.add_column('value')
        t.add_row('Applications', rh(str(len(system_apps))))
        t.add_row('DaqApplications', rh(str(len( [a for a in system_apps if 'DaqApplication' in a.oksTypes()] ))))
        t.add_row('SmartDaqApplications', rh(str(len( [a for a in system_apps if 'SmartDaqApplication' in a.oksTypes()] ))))


        #
        # Environment
        #
        if s.environment:
            # print(s.environment)
            env_objs = set()
            for e in s.environment:
                env_objs.add(e)
                find_related(e, env_objs)

            env_var = sorted(env_objs, key=lambda x: x.id)

            t = Table(title=f"{s.id} environment", show_header=False,  expand=True)
            t.add_column('name')
            t.add_column('value')
            for e in env_var:
                if 'Variable' not in e.oksTypes():
                    continue
                t.add_row(e.id, rh(e.value))
            # print(t)
            grid.add_row(t)

        ###############
        # Verification
        ###############


        #
        # Networking
        #
        host_port_apps = {}
        for a in system_apps:
            for srvc in get_network_services(a):
                host_port_apps.setdefault(a.runs_on.runs_on.id, {}).setdefault(srvc .port,[]).append(f"{a.id}:{srvc.id}")    


        clashes = []
        for h,ports in host_port_apps.items():
            for p,apps in ports.items():
                if p != 0 and len(apps) > 1:
                    clashes.append((f'[red]{h}:{p}[/red]',rh(str(apps))))

        if clashes:
            t = Table(title=f"{s.id} port clashes", show_header=False, expand=True)
            t.add_column('name')
            t.add_column('value')

            for n,v in clashes:
                t.add_row(n,v)

            grid.add_row(t)



        print(grid)
        print()


@cli.command(short_help="List known classes and objects for each class")
@click.pass_obj
@click.option('-d', "--show-derived-objects-as-parents", "show_derived", is_flag=True, default=False, help="Include derived objects in parent class listing")
def list_classes(obj, show_derived):
    """
    Prints on screen the list of classes known to the schema,
    together with the ids of objects belonging to that class.
    """
    from rich.highlighter import ReprHighlighter

    rh = ReprHighlighter()
    cfg = obj.cfg

    table = Table("Classes")
    table.add_column('Class', 'Objects')
    for k in sorted(cfg.classes()):
        table.add_row(k, rh(str([o.UID() for o in cfg.get_objs(k) if (o.class_name() == k or show_derived)])))
    print(table)


@cli.command(short_help="Show properties of objects belonging to a class")
@click.argument('klass')
@click.option('-v/-h','--vertical/--horizontal', "vtable", default=True, help="Toggle vertical or horizontal orientation")
@click.pass_obj
def show_objects_of_class(obj, klass, vtable):
    """
    Show attributes and relationships of all objects in the database belonging to KLASS
    """

    from rich.highlighter import ReprHighlighter

    rh = ReprHighlighter()
 
    cfg = obj.cfg
    
    if klass not in cfg.classes():
        print('f[red]Class {klass} unknow to configuration[/red]')
        print(f'Known classes: {sorted(cfg.classes())}')
        raise SystemExit(-1)

    attrs = cfg.attributes(klass, True)
    rels = cfg.relations(klass, True)

    dals = cfg.get_dals(klass)

    if vtable:
        table = Table(title=klass)
        table.add_column('Member', style="cyan")

        for do in dals:
            table.add_column(do.id)

        for a in attrs:
            table.add_row(*([a]+[rh(str(getattr(do,a))) for do in dals]))

        for r in rels:
            rel_vals = [getattr(do,r) for do in dals]
            rel_strs = []
            for rv in rel_vals:
                if isinstance(rv,list):
                    rel_strs += [rh(str([getattr(v,'id', 'None') for v in rv]))]
                else:
                    rel_strs += [rh(getattr(rv,'id', 'None'))]
            table.add_row(*([f"{r} ([yellow]{rels[r]['type']}[/yellow])"]+rel_strs))
    else:

        table = Table(title=klass)
        table.add_column('id', style="cyan")
        for a in attrs:
            table.add_column(a)

        for r,ri in rels.items():
            table.add_column(f"{r} ([yellow]{rels[r]['type']}[/yellow])")
        
        for do in dals:
            attr_vals = [rh(str(getattr(do,a))) for a in attrs]
            rel_vals = [getattr(do,r) for r in rels]
            rel_strs = []
            for rv in rel_vals:
                if isinstance(rv,list):
                    rel_strs += [rh(str([getattr(v,'id', 'None') for v in rv]))]
                else:
                    rel_strs += [rh(getattr(rv,'id', 'None'))]
            table.add_row(*([do.id]+attr_vals+rel_strs))

    print(table)





@cli.command(short_help="Show relationship tree")
@click.argument('uid', type=click.UNPROCESSED, callback=verify_oks_uid, default=None)
@click.option('+a/-a','--show-attributes/--hide-attributes', "show_attrs", default=True, help="Show/Hide attributes")
@click.option('-l','--level', "level", type=int, default=None, help="Recursion level in the object tree")
@click.option('-f','--focus', "focus_path", default=None, help="Path within the object relationships to focus on")
@click.pass_obj
def show_object_tree(obj, uid, show_attrs, focus_path, level):
    """
    Show the relationship tree of the OKS object with identifier UID.

    UID is the unique object identifier in the database, composed by object name and class name. 
    The UID format argument is <object name>@<class>.

    Starting from the selected object, attributes and objects refererd by relationships are shown recursively as hierarchical tree.
    By default the command recursively crawls through relationship without limits. The recursion level can be limited with the corresponding optional parameter (see below).
    In case focussing on a relationship branch is helpful, the focus path option (see below for details) allows to specify the branch to focus on, starting trom the top object.
    If a focus path is specified, the recursion level is applied starting from the last element of the focus path.
    The focus path syntax combines relationhsip and object names, using `.` separators, and `[]` to select a single item in multi-value relatiosnips.
    The structure of the focus path specifier is `<relationship>[<optional object name>].<relationship>[<optional object name>]`.
    Note: specifiying the object name is required 

    \b
    `show-object-tree` subcommand example:
        Focus on the uses.dfhw-01 relationship of df-03@DFApplication and limit the output to 5 levels below df-03
        `show-object-tree df-03@DFApplication  -f network_rules[td-trb-net-rule].descriptor -l 5`
    """
    import re
    id, klass = uid

    from rich.highlighter import ReprHighlighter
    rh = ReprHighlighter()
    cfg = obj.cfg
    drr = DalRichRenderer(cfg)


    if klass not in cfg.classes():
        print(f'[red]Class {klass} unknow to configuration[/red]')
        print(f'Known classes: {sorted(cfg.classes())}')
        raise SystemExit(-1)

    
    focus_path = focus_path.split('.') if focus_path is not None else []
    re_index = re.compile('([\w-]*)(\[([\w-]*)\])?')
    path = []
    for p in focus_path:
        m = re_index.match(p)
        if m is None:
            raise RuntimeError("Incorrect systax of path specifier p")
        rel,_,name = m.groups()
        path.append((rel, name))

    try:
        do = cfg.get_dal(klass, id)
    except RuntimeError as e:
        raise click.BadArgumentUsage(f"Object '{id}' does not exist")

    tree = drr.make_obj_tree(do, show_attrs, path, level)
    print(tree)

        
# @cli.command()
# @click.argument('uid', type=click.UNPROCESSED, callback=verify_oks_uid, default=None)
# @click.pass_obj
# def test_find_relations(obj, uid):

#     cfg = obj.cfg
#     id, klass = uid


#     if klass not in cfg.classes():
#         print(f'[red]Class {klass} unknow to configuration[/red]')
#         print(f'Known classes: {sorted(cfg.classes())}')
#         raise SystemExit(-1)

#     try:
#         dal_obj = cfg.get_dal(klass, id)
#     except RuntimeError as e:
#         raise click.BadArgumentUsage(f"Object '{id}' does not exist")
    
#     print(dal_obj)
    
#     grp = set()
#     find_related_dals(dal_obj, grp)

#     print(f"Found {len(grp)} objects related to {id}@{klass}")
#     # print(grp)
#     IPython.embed(colors="neutral")


@cli.command(short_help="Verify detector streams in the database")
@click.pass_obj
def verify_detstreams(obj):
    """
    Performs basic validation of detector datastreams in a database.

    It checks the collection of all detastreans in the database for uiniqueness.
    It also checks that all geo_ids references by detecor streams are unique.
    """
    from rich.highlighter import ReprHighlighter
    rh = ReprHighlighter()
    cfg = obj.cfg


    klass = 'DetectorStream'
    ds_attrs = cfg.attributes(klass, True)
    ds_rels = cfg.relations(klass, True)

    if list(ds_rels) != ['geo_id']:
        raise click.ClickException(f"Unexpected relationships found in DetectorStream {ds_rels}")


    gid_attrs = cfg.attributes("GeoId", True)
    gid_rels = cfg.relations("GeoId", True)

    if gid_rels:
        raise click.ClickException("Geoids are not expected to have relationships")


    streams = cfg.get_dals(klass)
    streams = sorted(streams, key=lambda x: x.source_id)


    # Print an expanded detector stream table, including geo_id attributes
    table = Table(title='DetectorStreams')
    table.add_column('id')
    table.add_column('status')

    for a in ds_attrs:
        table.add_column(a)

    table.add_column('geo_id.id')

    for a in gid_attrs:
        table.add_column(f"{a}")


    for strm in streams:
        enabled_marker = ':blue_circle:'
        
        ds_attr_vals = [rh(str(getattr(strm,a))) for a in ds_attrs]
        gid_attr_vals = [rh(str(getattr(strm.geo_id,a))) for a in gid_attrs]

        table.add_row(*([strm.id, enabled_marker]+ds_attr_vals+[strm.geo_id.id]+gid_attr_vals))

    print(table)

    # Check for duplicate strm
    strm_duplicates = find_duplicates(streams)

    if strm_duplicates:
        print(f"[yellow]:warning: Found {len(strm_duplicates)} duplicates in detector streams {strm_duplicates}[/yellow]")
    else:
        print(f"[green]:white_check_mark: No duplicates among detector streams[/green]")


    gid_duplicates = find_duplicates([strm.geo_id for strm in streams])

    if gid_duplicates:
        print(f"[yellow]:warning: Found {len(gid_duplicates)} duplicates in geo ids {gid_duplicates}[/yellow]")
    else:
        print(f"[green]:white_check_mark: No duplicates among geo ids[/green]")



@cli.command(short_help="Verify smart applications in database")
@click.pass_obj
def verify_smart_apps(obj):
    """
    Performs basic validation on smart daq applications a database.

    Implemented tests:
    - `services`: The exposed service consistency between application interface and network rules is checked.
      the services referenced in network rules are compared with the list in the `exposes_service` attribute.
      The tedt fails if any of the network rules services is not present in `exposes_service`.
    """

    from dataclasses import dataclass

    @dataclass
    class TestReport:
        passed: bool
        details : list

    from rich.highlighter import ReprHighlighter
    rh = ReprHighlighter()
    cfg = obj.cfg

    sapps = cfg.get_dals('SmartDaqApplication')

    reports = {}
    for sa in sapps:
        test_reports = {}

        # Example: test for consistency between exposed service and network rules
        # TODO: Move test code into a separate module/wrapper objecy
        missing_services = []
        for r in sa.network_rules:
            if r.descriptor.associated_service not in sa.exposes_service:
                missing_services.append(r.descriptor.associated_service)

        test_reports['exp srv vs. net rules'] = TestReport(not bool(missing_services), f"Not in exposed {[i.id for i in missing_services]}")
        
        reports[sa.id] = test_reports
        


    # Prepare report table
    rep_cols = set()
    for rep in reports.values():
        rep_cols.update(rep.keys())

    
    t = Table(title="SmartDaqApp Validation Report")
    t.add_column("app name")
    for c in rep_cols:
        t.add_column(c)

    for name, rep in reports.items():
        row = [name]
        for c in rep_cols:
            # TODO: specific to the services case
            icon  = ':white_check_mark:' if rep[c].passed else ':x:'
            # details = str([i.id for i in rep[c].details])
            details = rep[c].details
            row.append( f"{icon} ({details})")


        t.add_row(*row)

    print(t)


@cli.command(short_help="Shows the modules generated by a smart application")
@click.argument('system_id')
@click.argument('app_id')
@click.option('+a/-a','--show-attributes/--hide-attributes', "show_attrs", default=True, help="Show/Hide attributes")
@click.option('-l','--level', "level", type=int, default=None, help="Recursion level in the object tree")
@click.option('-f','--focus', "focus_path", default=None, help="Path within the object relationships to focus on")
@click.pass_obj
def show_smartapp_mods(obj, system_id, app_id, show_attrs, level, focus_path):
    """
    For the selected smart application and system, execute the generate modules method and displays the results in a hierarchical tree.
    Resource objexts are displaied with their status.

    In case focussing on a relationship branch is helpful, the focus path option (see below for details) allows to specify the branch to focus on, starting trom the top object.
    If a focus path is specified, the recursion level is applied starting from the last element of the focus path.
    The focus path syntax combines relationhsip and object names, using `.` separators, and `[]` to select a single item in multi-value relatiosnips.
    The structure of the focus path specifier is `<relationship>[<optional object name>].<relationship>[<optional object name>]`.
    Note: specifiying the object name is required .

    \b
      Legend
      ------
        ‚úÖ : Resource enabled
        ‚ùå : Resource directly disabled (listed in the System disable list)
        ‚≠ïÔ∏è : Resource indirectly disabled by algorithm
        üîµ : Not a resource
    """

    from appmodel import generate_modules, UnknownGeneratorException
    from daqconf.system import get_system_apps
    import re

    from rich.highlighter import ReprHighlighter
    rh = ReprHighlighter()
    cfg = obj.cfg
    drr = DalRichRenderer(cfg)

    focus_path = focus_path.split('.') if focus_path is not None else []
    re_index = re.compile('([\w-]*)(\[([\w-]*)\])?')
    path = []
    for p in focus_path:
        m = re_index.match(p)
        if m is None:
            raise RuntimeError("Incorrect systax of path specifier p")
        rel,_,name = m.groups()
        path.append((rel, name))

    s = cfg.get_dal('System', system_id)

    sm_apps = get_segment_apps(s.segment)

    sm_app = next(iter(a for a in sm_apps if a.id == app_id ), None)

    if sm_app is None:
        raise click.ClickException(f"Smart Application {app_id} not found")

    print(f"Generating modules for app '{sm_app.id}' of class '{sm_app.className()}' in system '{s.id}'")
    try:
        # FIXME: AAAAAARGH
        # Need to use local copies because different applications generate the same objects in the db
        local_cfg = conffwk.Configuration(f"oksconflibs:{cfg.active_database}")
        mods = generate_modules(local_cfg, sm_app, s)

        tree = Tree(f"[green]{sm_app.id}[/green][magenta]@{sm_app.className()}[/magenta]")

        if path:

            mods = [m for m in mods if m.id == path[0][0]]
            path = path[1:]

        for m in mods:
            tree.add(drr.make_obj_tree(m, show_attrs, path, level, s))
        print(tree)

    except UnknownGeneratorException as e:
        print(f"[red]Error: no available module generator for {sm_app.className()}[/red]")


    # start_ipython(locals())


if __name__== "__main__":
    cli(obj=DaqInspectorContext())