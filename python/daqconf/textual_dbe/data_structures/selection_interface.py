'''
Class which defines selection menus where the menu is generated by a tree
'''

from abc import ABC, abstractmethod
from daqconf.textual_dbe.data_structures.structured_configuration import StructuredConfiguration
from daqconf.textual_dbe.data_structures.relational_graph import RelationalGraph

class SelectionInterface(ABC):
    ''' Generic Selection interface
    '''
    def __init__(self, config_handler: StructuredConfiguration):
        self._handler =  config_handler
        self._relational_dict: dict = self._build_relational_dict()
    
    def recompose(self)->None:
        #Â Regenerates the GUI
        self._relational_dict = self._build_relational_dict()
    
    @abstractmethod
    def _build_relational_dict(self):
        # Abstract method to be implemented by concrete classes
        return {}
    
    @property
    def relationships(self):
        # Return the relationships between objects
        return self._relational_dict
    
    
# Couple of concrete classes
class ClassSelectionMenu(SelectionInterface):
    '''Selection menu based purely on the class of objects
    '''
    def _build_relational_dict(self):
        """Returns all classes + conf objs for class/derived classes
        """        
        return self._handler.configuration_handler.get_all_conf_classes()
    
    def __repr__(self):
        return "ClassSelectionMenu"
    
class RelationalSelectionMenu(SelectionInterface):
    ''' Selection menu based on class relationships
    '''    
    def _build_relational_dict(self):                
        configuration_dict = {f"[green]Systems" : [self.__build_node(top_node) for top_node in self._handler.relational_graph.top_level_nodes if top_node.className() == "System"],
                        f"[green]Objects outside of System" : [self.__build_node(top_node) for top_node in self._handler.relational_graph.top_level_nodes if top_node.className() != "System"]}
        
        return configuration_dict
    
    def __build_node(self, conf_obj):
        """Build each node of the relational graph

        Arguments:
            conf_obj -- Configuration object
        """        
        
        # We can deal with the schema
        relationships = self._handler.configuration_handler.get_relationships_for_conf_object(conf_obj)
        
        if not len(relationships):
            return conf_obj

        relations_list = []
        for rel_category in relationships:
            for rel_type, rel in rel_category.items():
                # Bit slower but configuration isn't large enough for this to really matter]
                relations_list.append({f"[blue]{rel_type}[/blue]": [self.__build_node(r) for r in rel]})
            
        
        return {conf_obj: relations_list}
    
    def __repr__(self):
        return "RelationalSelectionMenu"